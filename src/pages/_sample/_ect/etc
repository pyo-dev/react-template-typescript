import React, { useMemo, useRef, useState } from "react";
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  getFilteredRowModel,
  flexRender,
  ColumnDef,
  Row,
} from "@tanstack/react-table";
import { useVirtualizer } from "@tanstack/react-virtual";
import "./VirtualizedTableWithHeader.css";

const ROW_COUNT = 10000;
const COLUMN_COUNT = 400;
const COLUMN_WIDTH = 120;
const ROW_HEIGHT = 35;

export type RowData = Record<string, any>;

const VirtualizedTableWithHeader: React.FC = () => {
  const data = useMemo<RowData[]>(
    () =>
      Array.from({ length: ROW_COUNT }, (_, rowIndex) => {
        const row: RowData = {};
        for (let col = 0; col < COLUMN_COUNT; col++) {
          row[`col${col}`] = `R${rowIndex}-C${col}`;
        }
        return row;
      }),
    []
  );

  const [sorting, setSorting] = useState([]);
  const [columnFilters, setColumnFilters] = useState<Record<string, string>>({});

  const columns = useMemo<ColumnDef<RowData, any>[]>(
    () =>
      Array.from({ length: COLUMN_COUNT }, (_, i) => ({
        accessorKey: `col${i}`,
        header: () => `Col ${i}`,
        cell: (info) => info.getValue() as string,
        filterFn: (row, columnId, filterValue) => {
          const value = row.getValue(columnId);
          return String(value).toLowerCase().includes(filterValue.toLowerCase());
        },
      })),
    []
  );

  const table = useReactTable<RowData>({
    data,
    columns,
    state: { sorting, columnFilters },
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
  });

  const parentRef = useRef<HTMLDivElement | null>(null);
  const rowVirtualizer = useVirtualizer({
    count: table.getRowModel().rows.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => ROW_HEIGHT,
    overscan: 10,
  });

  return (
    <div style={{ width: "100%" }}>
      <div
        ref={parentRef}
        className="table-scroll-container"
        style={{ height: "600px", width: "100%", overflow: "auto", position: "relative" }}
      >
        <div style={{ width: `${COLUMN_COUNT * COLUMN_WIDTH}px` }}>
          {/* Ìó§Îçî + Ïª¨Îüº ÌïÑÌÑ∞ */}
          <div
            className="table-header"
            style={{
              display: "grid",
              gridTemplateColumns: `repeat(${columns.length}, ${COLUMN_WIDTH}px)`,
              position: "sticky",
              top: 0,
              zIndex: 3,
            }}
          >
            {table.getHeaderGroups().map((headerGroup) => (
              <React.Fragment key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  const sorted = header.column.getIsSorted();
                  const columnId = header.column.id;

                  return (
                    <div className="header-cell" key={header.id}>
                      <div
                        style={{ cursor: "pointer" }}
                        onClick={header.column.getToggleSortingHandler()}
                      >
                        {flexRender(header.column.columnDef.header, header.getContext())}
                        {sorted ? (sorted === "asc" ? " üîº" : " üîΩ") : ""}
                      </div>

                      {/* üîπ Ïª¨ÎüºÎ≥Ñ ÌïÑÌÑ∞ */}
                      <input
                        type="text"
                        value={columnFilters[columnId] ?? ""}
                        onChange={(e) =>
                          setColumnFilters({
                            ...columnFilters,
                            [columnId]: e.target.value,
                          })
                        }
                        placeholder="Filter..."
                        style={{
                          width: "100%",
                          marginTop: 2,
                          padding: "2px 4px",
                          fontSize: 10,
                        }}
                      />
                    </div>
                  );
                })}
              </React.Fragment>
            ))}
          </div>

          {/* Î≥∏Î¨∏ */}
          <div style={{ height: `${rowVirtualizer.getTotalSize()}px`, position: "relative" }}>
            {rowVirtualizer.getVirtualItems().map((virtualRow) => {
              const row: Row<RowData> = table.getRowModel().rows[virtualRow.index];
              return (
                <div
                  key={row.id}
                  className="table-row"
                  style={{
                    position: "absolute",
                    top: 0,
                    left: 0,
                    transform: `translateY(${virtualRow.start}px)`,
                    display: "grid",
                    gridTemplateColumns: `repeat(${columns.length}, ${COLUMN_WIDTH}px)`,
                  }}
                >
                  {row.getVisibleCells().map((cell) => (
                    <div className="table-cell" key={cell.id}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </div>
                  ))}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VirtualizedTableWithHeader;


.table-scroll-container {
  border: 1px solid #ccc;
  font-size: 12px;
  background: #fff;
}

.table-header {
  background: #f8f8f8;
  border-bottom: 2px solid #ccc;
}

.header-cell {
  padding: 4px 8px;
  border-right: 1px solid #ddd;
  font-weight: bold;
  text-align: center;
  white-space: nowrap;
}

.header-cell input {
  border: 1px solid #ccc;
  border-radius: 2px;
}

.table-row {
  border-bottom: 1px solid #eee;
}

.table-cell {
  padding: 6px;
  border-right: 1px solid #f0f0f0;
  text-align: center;
  white-space: nowrap;
}
