import React, { useMemo, useRef, useState, useEffect } from "react";
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  getFilteredRowModel,
  flexRender,
  ColumnDef,
  Row,
  SortingState,
  ColumnFiltersState,
} from "@tanstack/react-table";
import { useVirtualizer } from "@tanstack/react-virtual";
import { useQuery } from "@tanstack/react-query";
import "./VirtualizedTable.css";

const COLUMN_WIDTH = 120;
const ROW_HEIGHT = 35;

// Í≥†Ï†ï Ïª¨Îüº Í∞úÏàò
const fixedStartCount = 1; // Îß® Ïïû NÍ∞ú (Ï≤¥ÌÅ¨Î∞ïÏä§ Ìè¨Ìï®)
const fixedEndCount = 2;   // Îß® Îí§ NÍ∞ú

export type RowData = Record<string, any>;

// ------------------------
// Îç∞Ïù¥ÌÑ∞ fetch ÏòàÏãú (React Query)
// ------------------------
const fetchData = async (): Promise<RowData[]> => {
  // ÏòàÏãú: Ïã§Ï†ú API ÏöîÏ≤≠
  const res = await fetch("/api/data");
  if (!res.ok) throw new Error("Failed to fetch data");
  return res.json();
};

const VirtualizedTable: React.FC = () => {
  // -------------------------------
  // React Query Îç∞Ïù¥ÌÑ∞
  // -------------------------------
  const { data: tableData = [], isLoading } = useQuery<RowData[]>(["tableData"], fetchData);

  const rowCount = tableData.length;
  const columnCount = tableData[0] ? Object.keys(tableData[0]).length : 0;

  // -------------------------------
  // ÏÉÅÌÉú
  // -------------------------------
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [selectedRowIds, setSelectedRowIds] = useState<Record<string, boolean>>({});

  // -------------------------------
  // Ïª¨Îüº Ï†ïÏùò
  // -------------------------------
  const columns: ColumnDef<RowData, any>[] = useMemo(() => {
    if (!tableData[0]) return [];

    const dataColumns: ColumnDef<RowData, any>[] = Object.keys(tableData[0]).map((key, i) => ({
      accessorKey: key,
      header: () => key,
      cell: (info) => info.getValue() as string,
      filterFn: (row, columnId, filterValue) => {
        const value = row.getValue(columnId);
        return String(value).toLowerCase().includes(String(filterValue).toLowerCase());
      },
    }));

    return [
      // Ï≤¥ÌÅ¨Î∞ïÏä§ Ïª¨Îüº
      {
        id: "select",
        header: () => <HeaderCheckbox />,
        cell: ({ row }) => (
          <input
            type="checkbox"
            checked={!!selectedRowIds[row.id]}
            onChange={() => {
              setSelectedRowIds((prev) => ({ ...prev, [row.id]: !prev[row.id] }));
            }}
          />
        ),
        size: 40,
      },
      ...dataColumns,
    ];
  }, [tableData, selectedRowIds]);

  // -------------------------------
  // React Table
  // -------------------------------
  const table = useReactTable<RowData>({
    data: tableData,
    columns,
    state: { sorting, columnFilters },
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
  });

  // -------------------------------
  // Virtualizer
  // -------------------------------
  const parentRef = useRef<HTMLDivElement | null>(null);
  const rowVirtualizer = useVirtualizer({
    count: table.getRowModel().rows.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => ROW_HEIGHT,
    overscan: 40,
  });

  // -------------------------------
  // Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
  // -------------------------------
  const exportSelected = () => {
    const selectedData = table.getRowModel().rows
      .filter((row) => selectedRowIds[row.id])
      .map((row) => row.original);
    console.log(selectedData);
    alert(`ÏÑ†ÌÉùÎêú Ìñâ Ïàò: ${selectedData.length} (ÏΩòÏÜî ÌôïÏù∏)`);
  };

  // -------------------------------
  // Ìó§Îçî Ï≤¥ÌÅ¨Î∞ïÏä§
  // -------------------------------
  const HeaderCheckbox: React.FC = () => {
    const ref = useRef<HTMLInputElement>(null);

    const allSelected =
      table.getRowModel().rows.length > 0 &&
      table.getRowModel().rows.every((row) => selectedRowIds[row.id]);
    const someSelected =
      table.getRowModel().rows.some((row) => selectedRowIds[row.id]) && !allSelected;

    useEffect(() => {
      if (ref.current) ref.current.indeterminate = someSelected;
    }, [someSelected]);

    return (
      <input
        ref={ref}
        type="checkbox"
        checked={allSelected}
        onChange={() => {
          const newSelected: Record<string, boolean> = {};
          if (!allSelected) {
            table.getRowModel().rows.forEach((row) => {
              newSelected[row.id] = true;
            });
          }
          setSelectedRowIds(newSelected);
        }}
      />
    );
  };

  // -------------------------------
  // sticky Ïä§ÌÉÄÏùº Í≥ÑÏÇ∞
  // -------------------------------
  const getStickyStyle = (index: number) => {
    if (index < fixedStartCount) {
      return { position: "sticky", left: index * COLUMN_WIDTH, zIndex: 4, background: "#f0f0f0" };
    }
    if (index >= columns.length - fixedEndCount) {
      const rightIndex = columns.length - index - 1;
      return { position: "sticky", right: rightIndex * COLUMN_WIDTH, zIndex: 4, background: "#f0f0f0" };
    }
    return {};
  };

  if (isLoading) return <div>Loading...</div>;

  // -------------------------------
  // Î†åÎçîÎßÅ
  // -------------------------------
  return (
    <div style={{ width: "100%" }}>
      <button onClick={exportSelected} style={{ marginBottom: 8, padding: "6px 12px" }}>
        Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
      </button>

      <div
        ref={parentRef}
        className="table-scroll-container"
        style={{ height: "600px", width: "100%", overflow: "auto", position: "relative" }}
      >
        <div style={{ width: `${columns.length * COLUMN_WIDTH}px` }}>
          {/* Ìó§Îçî + Ïª¨Îüº ÌïÑÌÑ∞ */}
          <div
            className="table-header"
            style={{
              display: "grid",
              gridTemplateColumns: `repeat(${columns.length}, ${COLUMN_WIDTH}px)`,
              position: "sticky",
              top: 0,
              zIndex: 3,
            }}
          >
            {table.getHeaderGroups().map((headerGroup) =>
              headerGroup.headers.map((header, colIndex) => {
                const sorted = header.column.getIsSorted();
                const columnId = header.column.id;

                const [localFilter, setLocalFilter] = useState(
                  columnFilters.find((f) => f.id === columnId)?.value ?? ""
                );

                const stickyStyle = getStickyStyle(colIndex);

                return (
                  <div className="header-cell" key={header.id} style={stickyStyle}>
                    <div
                      style={{ cursor: "pointer" }}
                      onClick={header.column.getToggleSortingHandler()}
                    >
                      {flexRender(header.column.columnDef.header, header.getContext())}
                      {sorted ? (sorted === "asc" ? " üîº" : " üîΩ") : ""}
                    </div>

                    {header.id !== "select" && (
                      <div style={{ display: "flex", marginTop: 2 }}>
                        <input
                          type="text"
                          value={localFilter}
                          onChange={(e) => setLocalFilter(e.target.value)}
                          placeholder="Filter..."
                          style={{ width: "70%", padding: "2px 4px", fontSize: 10 }}
                        />
                        <button
                          style={{ marginLeft: 2 }}
                          onClick={() => {
                            setColumnFilters((old) => {
                              const newFilters = old.filter((f) => f.id !== columnId);
                              if (localFilter) newFilters.push({ id: columnId, value: localFilter });
                              return newFilters;
                            });
                          }}
                        >
                          üîç
                        </button>
                        <button
                          style={{ marginLeft: 2 }}
                          onClick={() => {
                            setLocalFilter("");
                            setColumnFilters((old) => old.filter((f) => f.id !== columnId));
                          }}
                        >
                          ‚ùå
                        </button>
                      </div>
                    )}
                  </div>
                );
              })
            )}
          </div>

          {/* Î≥∏Î¨∏ */}
          <div style={{ height: `${rowVirtualizer.getTotalSize()}px`, position: "relative" }}>
            {rowVirtualizer.getVirtualItems().map((virtualRow) => {
              const row: Row<RowData> = table.getRowModel().rows[virtualRow.index];
              return (
                <div
                  key={row.id}
                  className="table-row"
                  style={{
                    position: "absolute",
                    top: 0,
                    left: 0,
                    transform: `translateY(${virtualRow.start}px)`,
                    display: "grid",
                    gridTemplateColumns: `repeat(${columns.length}, ${COLUMN_WIDTH}px)`,
                  }}
                >
                  {row.getVisibleCells().map((cell, colIndex) => (
                    <div
                      className="table-cell"
                      key={cell.id}
                      style={getStickyStyle(colIndex)}
                    >
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </div>
                  ))}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VirtualizedTable;


.table-scroll-container {
  border: 1px solid #ccc;
  font-size: 12px;
  background: #fff;
}

.table-header {
  background: #f8f8f8;
  border-bottom: 2px solid #ccc;
}

.header-cell {
  padding: 4px 8px;
  border-right: 1px solid #ddd;
  font-weight: bold;
  text-align: center;
  white-space: nowrap;
}

.header-cell input {
  border: 1px solid #ccc;
  border-radius: 2px;
}

.table-row {
  border-bottom: 1px solid #eee;
  will-change: transform;
}

.table-cell {
  padding: 6px;
  border-right: 1px solid #f0f0f0;
  text-align: center;
  white-space: nowrap;
}
