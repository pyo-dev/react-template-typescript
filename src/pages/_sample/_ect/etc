import React, { useMemo, useRef } from "react";
import {
  useReactTable,
  getCoreRowModel,
  flexRender,
  createColumnHelper,
} from "@tanstack/react-table";
import { useVirtualizer } from "@tanstack/react-virtual";
import "./VirtualizedTableWithHeader.css";

const ROW_COUNT = 10000;
const COLUMN_COUNT = 400;

// üîπ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
const data = useMemo(
  () =>
    Array.from({ length: ROW_COUNT }, (_, rowIndex) => {
      const row = {};
      for (let col = 0; col < COLUMN_COUNT; col++) {
        row[`col${col}`] = `R${rowIndex}-C${col}`;
      }
      return row;
    }),
  []
);

// üîπ Ïª¨Îüº Ï†ïÏùò
const columnHelper = createColumnHelper();
const columns = useMemo(
  () =>
    Array.from({ length: COLUMN_COUNT }, (_, i) =>
      columnHelper.accessor(`col${i}`, {
        header: `Col ${i}`,
        cell: (info) => info.getValue(),
      })
    ),
  []
);

const VirtualizedTableWithHeader = () => {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  const parentRef = useRef(null);

  const rowVirtualizer = useVirtualizer({
    count: table.getRowModel().rows.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 35,
    overscan: 10,
  });

  const columnWidth = 120;

  return (
    <div className="table-container">
      {/* Í≥†Ï†ï Ìó§Îçî */}
      <div
        className="table-header"
        style={{
          display: "grid",
          gridTemplateColumns: `repeat(${columns.length}, ${columnWidth}px)`,
        }}
      >
        {table.getHeaderGroups().map((headerGroup) => (
          <React.Fragment key={headerGroup.id}>
            {headerGroup.headers.map((header) => (
              <div className="header-cell" key={header.id}>
                {flexRender(header.column.columnDef.header, header.getContext())}
              </div>
            ))}
          </React.Fragment>
        ))}
      </div>

      {/* Ïä§ÌÅ¨Î°§ Í∞ÄÎä•Ìïú Î≥∏Î¨∏ */}
      <div
        ref={parentRef}
        className="table-body"
        style={{ height: "600px", overflow: "auto", position: "relative" }}
      >
        <div
          style={{
            height: `${rowVirtualizer.getTotalSize()}px`,
            position: "relative",
          }}
        >
          {rowVirtualizer.getVirtualItems().map((virtualRow) => {
            const row = table.getRowModel().rows[virtualRow.index];
            return (
              <div
                key={row.id}
                className="table-row"
                style={{
                  position: "absolute",
                  top: 0,
                  left: 0,
                  transform: `translateY(${virtualRow.start}px)`,
                  display: "grid",
                  gridTemplateColumns: `repeat(${columns.length}, ${columnWidth}px)`,
                }}
              >
                {row.getVisibleCells().map((cell) => (
                  <div className="table-cell" key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </div>
                ))}
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default VirtualizedTableWithHeader;


.table-container {
  width: 1200px;
  border: 1px solid #ccc;
  font-size: 12px;
}

.table-header {
  position: sticky;
  top: 0;
  z-index: 2;
  background: #f5f5f5;
  border-bottom: 2px solid #ccc;
}

.header-cell {
  padding: 8px;
  border-right: 1px solid #ddd;
  font-weight: bold;
  text-align: center;
  white-space: nowrap;
}

.table-body {
  background: #fff;
}

.table-row {
  border-bottom: 1px solid #eee;
}

.table-cell {
  padding: 6px;
  border-right: 1px solid #f0f0f0;
  text-align: center;
  white-space: nowrap;
}
